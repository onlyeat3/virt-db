on:
  push:
    branches:
      - 'release/**'

name: Build and Release

jobs:
  linux:
    name: Linux
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
        version:
          - nightly
    steps:
      - uses: actions/checkout@v2
      - name: Install ${{ matrix.version }}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{matrix.version}}
          target: ${{ matrix.target }}
          override: true
      - name: workaround MSRV issues
        run: |
          cargo update -p=zstd-sys --precise=2.0.1+zstd.1.5.2
      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v1.2.0

      - name: Build Linux
        uses: jean-dfinity/rust-musl-action@master
        with:
          args: rustup default nightly && rustup target add ${{ matrix.target }} && cargo +nightly build --target=${{ matrix.target }} --release

      - name: Zip the Build
        run: |
          pwd
          ls -al target
          ls -al target/${{matrix.target}}
          file target/${{matrix.target}}/release/admin
          file target/${{matrix.target}}/release/server
          
          cd target/${{matrix.target}}/release
          ls -al
          sudo zip -r ${{ matrix.target }}.zip admin* server* -x admin.d -x admin.pdb -x server.d -x server.pdb

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: |
            target/${{matrix.target}}/release/admin
            target/${{matrix.target}}/release/server

      - name: Clear the cargo caches
        run: |
          cargo install cargo-cache --version 0.8.2 --no-default-features --features ci-autoclean
          cargo-cache

  windows:
    name: x86_64-pc-windows-msvc
    runs-on: windows-2022
    continue-on-error: true
    strategy:
      matrix:
        target:
          - x86_64-pc-windows-msvc
        version:
          - nightly
    steps:
      - uses: actions/checkout@v2
      # install OpenSSL on Windows
      # TODO: GitHub actions docs state that OpenSSL is
      # already installed on these Windows machines somewhere
      - name: Set vcpkg root
        if: matrix.target == 'x86_64-pc-windows-msvc'
        run: echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
      - name: Install OpenSSL
        if: matrix.target == 'x86_64-pc-windows-msvc'
        run: vcpkg install openssl:x64-windows

      - name: Install ${{ matrix.version }}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{matrix.version}}
          target: ${{ matrix.target }}
          override: true
      - name: workaround MSRV issues
        if: matrix.version != 'stable'
        run: |
          cargo update -p=zstd-sys --precise=2.0.1+zstd.1.5.2
      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v1.2.0

      - name: Build
        run: |
          cargo +nightly build --target=${{ matrix.target }} --release

      - name: Show Artifacts
        run: |
          pwd
          ls target
          ls target/${{matrix.target}}/release
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: |
            target/${{matrix.target}}/release/admin.exe
            target/${{matrix.target}}/release/server.exe
      - name: Clear the cargo caches
        run: |
          cargo install cargo-cache --version 0.8.2 --no-default-features --features ci-autoclean
          cargo-cache

  release:
    name: Create Github Release
    needs:
      - linux
      - windows
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          path: ./artifacts
      - name: Display structure of downloaded files
        run: ls -alh
        working-directory: ./artifacts
      - name: Zip files
        run: |
          tee zip_files.sh <<-'EOF'
          #!/bin/bash
          FILE=`ls`
          for i in $FILE
          do
          cd $i
          zip -rq $i.zip .
          mv $i.zip ../
          cd ..
          done
          EOF
          sh zip_files.sh
          rm -rf zip_files.sh
        working-directory: ./artifacts

      - name: Get Tag Name
        id: tag_name
        run: echo "::set-output name=tag_name::$(a=$(git rev-parse --abbrev-ref HEAD) && echo ${a/#release\/})"
      - name: Duplicate Release With Asset to public_Repo
        id: Release-AIO
        uses: Hs1r1us/Release-AIO@v2.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: v${{ steps.tag_name.outputs.tag_name }}
          release_name: ${{ steps.tag_name.outputs.tag_name }}
          body: Release ${{ steps.tag_name.outputs.tag_name }}
          draft: false
          prerelease: false
          asset_files: './artifacts'