on: [push]

name: Build

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
#          - i686-pc-windows-gnu
#          - i686-unknown-linux-gnu
#          - x86_64-apple-darwin
#          - x86_64-pc-windows-gnu
#          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: ${{ matrix.target }}
          override: true
      - name: Install x86 Build Dependencies
        if: ${{ matrix.target == 'i686-pc-windows-gnu' || matrix.target == 'i686-unknown-linux-gnu' }}
        run: |
          sudo dpkg --add-architecture i386 && sudo apt-get update && sudo apt-get install libssl-dev:i386 clang
          

      - name: Install x86_64 Build Dependencies
        if: ${{ matrix.target != 'i686-pc-windows-gnu' && matrix.target != 'i686-unknown-linux-gnu' }}
        run: |
          sudo apt-get update && sudo apt-get install pkg-config libssl-dev clang

      - name: Install OpenSSL Dependencies
        run: |
          export SSL_VER="1.1.1q"
          export CURL_VER="7.85.0"
          export ZLIB_VER="1.2.13"
          export PQ_VER="11.12"
          export SQLITE_VER="3390400"
          export CC=musl-gcc
          export PREFIX=/musl
          export PATH=/usr/local/bin:/root/.cargo/bin:$PATH
          export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
          export LD_LIBRARY_PATH=$PREFIX
          
          sudo apt install musl-tools
          
          mkdir $PREFIX && \
          echo "$PREFIX/lib" >> /etc/ld-musl-x86_64.path && \
          ln -s /usr/include/x86_64-linux-gnu/asm /usr/include/x86_64-linux-musl/asm && \
          ln -s /usr/include/asm-generic /usr/include/x86_64-linux-musl/asm-generic && \
          ln -s /usr/include/linux /usr/include/x86_64-linux-musl/linux
          
          curl -sSL https://zlib.net/zlib-$ZLIB_VER.tar.gz | tar xz && \
          cd zlib-$ZLIB_VER && \
          CC="musl-gcc -fPIC -pie" LDFLAGS="-L$PREFIX/lib" CFLAGS="-I$PREFIX/include" ./configure --static --prefix=$PREFIX && \
          sudo make -j$(nproc) && make install && \
          cd .. && rm -rf zlib-$ZLIB_VER
          
          curl -sSL https://www.openssl.org/source/openssl-$SSL_VER.tar.gz | tar xz && \
          export SSL_VER="1.1.1q"
          cd openssl-$SSL_VER && \
          ./Configure no-zlib no-shared -fPIC --prefix=$PREFIX --openssldir=$PREFIX/ssl linux-x86_64 && \
          env C_INCLUDE_PATH=$PREFIX/include make depend 2> /dev/null && \
          sudo make -j$(nproc) && make install && \
          cd .. && rm -rf openssl-$SSL_VER
          
          export PATH=$PREFIX/bin:$PATH
          export PKG_CONFIG_ALLOW_CROSS=true
          export PKG_CONFIG_ALL_STATIC=true
          export PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig
          export PG_CONFIG_X86_64_UNKNOWN_LINUX_GNU=/usr/bin/pg_config
          export OPENSSL_STATIC=true
          export OPENSSL_DIR=$PREFIX
          export SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt
          export SSL_CERT_DIR=/etc/ssl/certs
          export LIBZ_SYS_STATIC=1
          export DEBIAN_FRONTEND=noninteractive
          
      - name: Build x86
        uses: actions-rs/cargo@v1
        if: ${{ matrix.target == 'i686-pc-windows-gnu' || matrix.target == 'i686-unknown-linux-gnu' }}
        env:
          TARGET_CC: clang
          OPENSSL_LIB_DIR: /usr/lib/i386-linux-gnu/
          OPENSSL_INCLUDE_DIR: /usr/include/openssl/
        with:
          command: build
          args: --release --target=${{ matrix.target }}
      - name: Build x86_64
        uses: actions-rs/cargo@v1
        if: ${{ matrix.target != 'i686-pc-windows-gnu' && matrix.target != 'i686-unknown-linux-gnu' }}
        env:
          TARGET_CC: clang
          OPENSSL_LIB_DIR: /usr/lib/x86_64-linux-gnu/
          OPENSSL_INCLUDE_DIR: /usr/include/openssl/
        with:
          command: build
          args: --release --target=${{ matrix.target }}
      - name: Check Artifact
        run: |
          ls -al target/release
          file target/release/admin
          file target/release/server