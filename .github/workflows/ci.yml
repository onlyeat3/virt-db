on: [ push ]

name: Build

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-apple-darwin
          - x86_64-pc-windows-gnu
          - x86_64-unknown-linux-musl
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: ${{ matrix.target }}
          override: true
      - name: Generate Cargo.lock
        uses: actions-rs/cargo@v1
        with: { command: generate-lockfile }
      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v1.2.0
      - name: Install x86_64 Build Dependencies
        if: ${{ matrix.target != 'i686-pc-windows-gnu' && matrix.target != 'i686-unknown-linux-gnu' }}
        run: |
          sudo apt-get update && sudo apt-get install pkg-config libssl-dev clang

      - name: Build x86_64
        uses: actions-rs/cargo@v1
        if: ${{ matrix.target != 'x86_64-unknown-linux-musl' }}
        env:
          TARGET_CC: clang
          OPENSSL_LIB_DIR: /usr/lib/x86_64-linux-gnu/
          OPENSSL_INCLUDE_DIR: /usr/include/openssl/
        with:
          command: build
          args: --release --target=${{ matrix.target }}

      - name: Build Linux Musl
        uses: jean-dfinity/rust-musl-action@master
        if: ${{ matrix.target == 'x86_64-unknown-linux-musl'}}
        with:
          args: rustup default nightly && rustup target add x86_64-unknown-linux-musl && cargo +nightly build --target=${{ matrix.target }} --release



      - name: Zip the Build
        run: |
          pwd
          ls -al target
          ls -al target/${{matrix.target}}
          file target/${{matrix.target}}/release/admin
          file target/${{matrix.target}}/release/server
          
          cd target/${{matrix.target}}/release
          ls -al
          sudo zip -r ${{ matrix.target }}.zip admin* server* -x admin.d -x admin.pdb -x server.d -x server.pdb

      - name: Get current Commit ID
        id: branch
        run: echo "::set-output name=branch::$(git rev-parse --abbrev-ref HEAD)"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: ${{ steps.branch.outputs.branch }}
          release_name: ${{ steps.branch.outputs.branch }}
          body: TODO New Release.
          draft: false
          prerelease: false
          allowUpdates: true

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/${{matrix.target}}/release/${{ matrix.target }}.zip
          asset_name: ${{ matrix.target }}.zip
          asset_content_type: application/zip

      - name: Clear the cargo caches
        run: |
          cargo install cargo-cache --version 0.8.2 --no-default-features --features ci-autoclean
          cargo-cache
